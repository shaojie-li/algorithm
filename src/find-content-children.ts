/**
 * 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
 *
 * 对每个孩子 i，都有一个胃口值 `g[i]`，这是能让孩子们满足胃口的饼干的最小尺寸；
 * 并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
 *
 * > 你的目标是尽可能满足越多数量的孩子，并输出这个最大数值
 *
 * 示例 1:
 * 输入: g = [1,2,3], s = [1,1]
 * 输出: 1
 * 解释:
 * 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
 * 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
 * 所以你应该输出1。
 *
 * 示例 2:
 * 输入: g = [1,2], s = [1,2,3]
 * 输出: 2
 * 解释:
 * 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
 * 你拥有的饼干数量和尺寸都足以让所有孩子满足。
 * 所以你应该输出2.
 *
 * 标签：贪心算法、双指针
 */

export function findContentChildren(g: number[], s: number[]): number {
    if (g.length === 0 || s.length === 0) return 0;
    // 思路：双指针
    let count = 0;
    let i = 0;
    let j = 0;

    g.sort((a, b) => a - b);
    s.sort((a, b) => a - b);

    // 参数：[10, 9, 8, 7], [5, 6, 7, 8]
    // 从小到大排序后：
    // g: [7, 8, 9, 10]
    // s: [5, 6, 7, 8]

    while (i < g.length && j < s.length) {
        // 如果当前的饼干尺寸能满足孩子胃口，计数器加1，继续遍历一下个孩子
        if (s[j] >= g[i]) {
            i++;
            count++;
        }
        // 不论当前饼干是否足，都要遍历下一个饼干，所以 i 每次都 +1
        j++;
    }

    return count;
}

console.log(findContentChildren([10, 9, 8, 7], [5, 6, 7, 8]));
